<% unless @chef_requires.empty? -%>
<%= @chef_requires.inspect %>.each do |lib|
  begin
    require lib
  rescue LoadError
    Chef::Log.warn "Failed to load #{lib}. This should be resolved after a chef run."
  end
end

<% end -%>

<% unless @chef_license.nil? -%>
chef_license "<%= @chef_license %>"
<% end -%>
<% @chef_config.keys.sort.each do |option| -%>
  <% next if %w{ node_name exception_handlers report_handlers start_handlers http_proxy https_proxy no_proxy }.include?(option) -%>
  <% case option -%>
  <% when 'log_level', 'ssl_verify_mode', 'audit_mode' -%>
<%= option %> <%= @chef_config[option].to_s.gsub(/^:/, '').to_sym.inspect %>
  <% when 'log_location' -%>
  <%   if (@chef_config[option].instance_of? String) && @chef_config[option].match(/^(STDOUT|STDERR)$/) -%>
<%= option %> <%= @chef_config[option] %>
  <%   elsif (@chef_config[option].instance_of? String) && @chef_config[option].match(/^:?(syslog|win_evt)$/) -%>
<%= option %> <%= @chef_config[option].to_s.gsub(/^:/, '').to_sym.inspect %>
  <%   else -%>
<%= option %> <%= @chef_config[option].inspect %>
  <%   end -%>
  <% else -%>
<%= option %> <%= @chef_config[option].inspect %>
  <% end -%>
<% end -%>
<% if @chef_config['node_name'] -%>
node_name <%= @chef_config['node_name'].inspect %>
<% else -%>
# Using default node name (fqdn)
<% end -%>

<% unless node["chef_client"]["config"]["http_proxy"].nil? -%>
# set the proxy env variable so rubygems works correctly
http_proxy "<%= node["chef_client"]["config"]["http_proxy"] %>"
<% end -%>
<% unless node["chef_client"]["config"]["https_proxy"].nil? -%>
https_proxy "<%= node["chef_client"]["config"]["https_proxy"] %>"
<% end -%>
<% unless node["chef_client"]["config"]["no_proxy"].nil? -%>
no_proxy "<%= node["chef_client"]["config"]["no_proxy"] %>"
<% end -%>

<% unless node["ohai"]["plugin_path"].nil? -%>
ohai.plugin_path << "<%= node["ohai"]["plugin_path"] %>"
<% end -%>
<% unless @ohai_disabled_plugins.empty? -%>
ohai.disabled_plugins = [<%= @ohai_disabled_plugins.map { |k| k.match(/:/) ? k.gsub(/^:/, '').to_sym.inspect : k.inspect }.join(",") %>]
<% end -%>
<% unless @ohai_optional_plugins.empty? -%>
ohai.optional_plugins = [<%= @ohai_optional_plugins.map { |k| k.match(/:/) ? k.gsub(/^:/, '').to_sym.inspect : k.inspect }.join(",") %>]
<% end -%>

<% if @start_handlers.is_a?(Array) && @start_handlers.any? -%>
  # Do not crash if a start handler is missing / not installed yet
  begin
  <% @start_handlers.each do |handler| -%>
    start_handlers << <%= handler["class"] %>.new(<%= handler["arguments"].join(',') %>)
  <% end -%>
  rescue NameError => e
    Chef::Log.error e
  end
<% end -%>

<% if @report_handlers.is_a?(Array) && @report_handlers.any? -%>
  # Do not crash if a report handler is missing / not installed yet
  begin
  <% @report_handlers.each do |handler| -%>
    report_handlers << <%= handler["class"] %>.new(<%= handler["arguments"].join(',') %>)
  <% end -%>
  rescue NameError => e
    Chef::Log.error e
  end
<% end -%>

<% if @exception_handlers.is_a?(Array) && @exception_handlers.any? -%>
  # Do not crash if an exception handler is missing / not installed yet
  begin
  <% @exception_handlers.each do |handler| -%>
    exception_handlers << <%= handler["class"] %>.new(<%= handler["arguments"].join(',') %>)
  <% end -%>
  rescue NameError => e
    Chef::Log.error e
  end
<% end -%>
<% unless node['chef_client']['file_cache_path'].nil? -%>
file_cache_path "<%= node['chef_client']['file_cache_path'] %>"
<% end -%>
<% unless node['chef_client']['file_backup_path'].nil? -%>
file_backup_path "<%= node['chef_client']['file_backup_path'] %>"
<% end -%>
<% unless node['chef_client']['file_staging_uses_destdir'].nil? -%>
file_staging_uses_destdir "<%= node['chef_client']['file_staging_uses_destdir'] %>"
<% end -%>
