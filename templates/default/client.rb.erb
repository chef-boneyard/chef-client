<% unless @chef_requires.empty? -%>
<%= @chef_requires.inspect %>.each do |lib|
  begin
    require lib
  rescue LoadError
    Chef::Log.warn "Failed to load #{lib}. This should be resolved after a chef run."
  end
end

<% end -%>
<% @chef_config.keys.sort.each do |option| -%>
  <% next if %w{ node_name exception_handlers report_handlers start_handlers http_proxy https_proxy no_proxy }.include?(option) -%>
  <% case option -%>
  <% when 'log_level', 'ssl_verify_mode', 'audit_mode' -%>
<%= option %> <%= @chef_config[option].to_s.gsub(/^:/, '').to_sym.inspect %>
  <% when 'log_location' -%>
  <%   if (@chef_config[option].instance_of? String) && @chef_config[option].match(/^(STDOUT|STDERR)$/) -%>
<%= option %> <%= @chef_config[option] %>
  <%   else -%>
<%= option %> <%= @chef_config[option].inspect %>
  <%   end -%>
  <% else -%>
<%= option %> <%= @chef_config[option].inspect %>
  <% end -%>
<% end -%>
<% if @chef_config['node_name'] -%>
node_name <%= @chef_config['node_name'].inspect %>
<% else -%>
# Using default node name (fqdn)
<% end -%>

<% unless node["chef_client"]["config"]["http_proxy"].nil? -%>
# set the proxy env variable so rubygems works correctly
http_proxy "<%= node["chef_client"]["config"]["http_proxy"] %>"
<% end -%>
<% unless node["chef_client"]["config"]["https_proxy"].nil? -%>
https_proxy "<%= node["chef_client"]["config"]["https_proxy"] %>"
<% end -%>
<% unless node["chef_client"]["config"]["no_proxy"].nil? -%>
no_proxy "<%= node["chef_client"]["config"]["no_proxy"] %>"
<% end -%>

<% unless node["ohai"]["plugin_path"].nil? -%>
ohai.plugin_path << "<%= node["ohai"]["plugin_path"] %>"
<% end -%>
<% unless @ohai_disabled_plugins.empty? -%>
ohai.disabled_plugins = [<%= @ohai_disabled_plugins.map { |k| k.match(/:/) ? k.gsub(/^:/, '').to_sym.inspect : k.inspect }.join(",") %>]
<% end -%>

<% if !@start_handlers.empty? || !@report_handlers.empty? || !@exception_handlers.empty? -%>
# Do not crash if a handler is missing / not installed yet
begin
<% unless @start_handlers.nil? -%>
<% @start_handlers.each do |handler| -%>
  start_handlers << <%= handler["class"] %>.new(<%= handler["arguments"].join(',') %>)
<% end -%>
<% end -%>
<% unless @report_handlers.nil? -%>
<% @report_handlers.each do |handler| -%>
  report_handlers << <%= handler["class"] %>.new(<%= handler["arguments"].join(',') %>)
<% end -%>
<% end -%>
<% unless @exception_handlers.nil? -%>
<% @exception_handlers.each do |handler| -%>
  exception_handlers << <%= handler["class"] %>.new(<%= handler["arguments"].join(',') %>)
<% end -%>
<% end -%>
rescue NameError => e
  Chef::Log.error e
end
<% end -%>

<% if !@handlers.empty? -%>
# Do not crash if a handler is missing / not installed yet
begin
    <% @handlers.each do |handler| -%>
    <%# Create a new instance of each handler class %>
    <%# And add that new instance to the chef config %>
  <%= "#{handler["class"].downcase.gsub!(/[^0-9a-z ]/i, '_')}_instance" %> = <%= handler["class"] %>.new(<%= handler["arguments"].join(',') %>)
    <% if handler["handlers"].include?('start_handler') -%>
  start_handlers << <%= "#{handler["class"].downcase.gsub!(/[^0-9a-z ]/i, '_')}_instance" %>
    <% end -%>
    <% if handler["handlers"].include?('report_handler') -%>
  report_handlers << <%= "#{handler["class"].downcase.gsub!(/[^0-9a-z ]/i, '_')}_instance" %>
    <% end -%>
    <% if handler["handlers"].include?('exception_handler') -%>
  exception_handlers << <%= "#{handler["class"].downcase.gsub!(/[^0-9a-z ]/i, '_')}_instance" %>
    <% end -%>
    <% end -%>
rescue NameError => e
  Chef::Log.error e
end
<% end -%>
